함수
- '무엇'을 넣으면, '어떤 것'을 돌려주고 
메서드와 차이점 함수는 외부에 별도로 존재하고 메서드는 클래스안에 존재한다.

- 형식 = 매개변수1, 매개변수2로 입력하여 입력된 매개변수를 가공하고 처리하여 반환을 한다.

- plus = 매개변수를 두개를 입력받아 함수를 호출하여 v1,v2에 값을 넣어서 함수를 실행을 하며 result 값을 반환하여 plus 함수에 결과를 반환하여 hap에 반환된 값을 대입해준다.
         간략 표현 = 매개변수1,2에 입력된 매개변수를 더한값 300을 반환해준다.

- 지역변수 : 한정된 지역에서만 사용할 수 있다. (ex: a=10을 정의를 해주면 그 지역에서만 사용할 수 있으므로 그 외에 지역에서는 a의 값을 알 수가 없다.)
 
- 전역변수 : 프로그램 전체에서 사용할 수 있다. (ex: b=20을 정의를 해주면 프로그램 전체에서 사용할 수 있으므로 전체에서 b의 값을 알 수 있다.)

- a = 20
- a = 10
  print(a)를 하면 이때 a는 지역에 있는 변수이므로 지역변수를 의미한다.

- print(a)를 하면 이때 a는 전체 지역에 있는 변수이므로 전역변수를 의미한다.

- local(지역변수) = 특정 지역 범위에서만 영향을 주고 받을 수 있는 변수

- global(전역변수) = 파이썬 파일 전체 영역에서 사용 가능한 변수 (지역변수 인데 전역변수로 사용하고 싶을 때 사용)

함수의 반환값
- 반환값은 return문으로 반환되므로 리턴값
- 매개변수는 파라미터 라고한다.

반환값이 있는 함수
- 어떤 함수를 호출하여 함수를 실행하면 반환값이 있어서 그 값을 정해진 저장공간에 대입을 한다.

반환값이 없는 함수
- 어떤 함수를 호출하여 함수를 실행하면 반환값이 없어서 돌려줄 값이 없으므로 함수가 종료된다.

- pass = 코드는 필요하지만, 아무 작업도 하지 않기를 원할 때 사용


모듈
- 모듈의 종류 = 표준 - 파이썬에서 제공하는 모듈
               사용자 정의 - 직접 만들어서 사용하는 모듈
               서드 파티 - 파이썬이 아닌 외부나 단체에서 제공하는 모듈 ( 게임개발기능 = pygame, 윈도창을 제공 = pygtk, 데이터베이스 기능 = SQLAlchemy 

매개변수 전달
- 값에 의한 전달 = call by value
    일반 변수나 값을 전달할 때 함수에 동일한 크기의 별도의 메모리 공간이 확보되어 값이 복사되는 방식

- 참조에 의한 전달 = call by reference
    리스트를 매개변수로 전달하므로 주소가 전달되어 메모리 공간이 공유 되는 방식

내부함수
- lambda
    익명 함수라고 부르며 이름없는 함수로 일반적으로 함수를 한번만 사용하거나 함수를 인자로 전달해야 하는 경우 매우 유용하게 사용 ( 한줄로 가능하게 하는 함수)
- map
    시퀀스의 모든 요소에 함수를 적용한 결과를 반환


리스트/튜플/딕셔너리
- 정수, 문자열, 실수 등 서로 다른 데이터형도 하나로 묶을 수 있지만, 배열은 동일한 데이터형만 묶을 수 있다. 정수 배열은 정수로만 묶어서 사용 , 리스트로 정의해서 하나씩 변수로 사용

- 반복문과 사용시 값을 입력받아 i값이 0부터 3까지 4번 반복하고 i값이 변하게 한다.

- 리스트는 대괄호를 [] 생성하고 튜플은 소괄호 ()로 생성한다.

- 값을 수정할 수 없으며, 읽기만 가능해 읽기 전용 자료를 저장할 때 사용(튜플)

- 소괄호를 생략 가능, 항목이 하나인 튜플은 쉼표를 붙인다.

딕셔너리
- 해시, 연관배열(Associative Array)라고 한다.

- 중괄호로 {} 묶어서 구성, 키와 값으로 구성

- 딕셔너리[키]와 딕셔너리.get(키)는 결과가 같다.

- 딕셔너리[키]
  없는 키 호출하면 오류

- 딕셔너리.get(키)
  없는 키를 호출하면 아무것도 반환하지 않는다.

- 딕셔너리.items()
  튜플 형태로도 구할 수 있다.

- 키가 있으면 True, 없으면 False를 반환

- in을 사용해서 확인 가능, 키가 있는지 없는지

- 세트 = 키만 모아 놓은 딕셔너리의 특수 형태
    딕셔너리의 키는 중복되면 안되므로 세트에 들어 있는 값은 항상 유일하다.
    교집합,차집합,합집합,대칭 차집합을 구할 때 사용

- 얕은 복사
   = newList = oldList : 동일한 메모리 공간 공유

- 깊은 복사
    = newList = oldList[:] -> 메모리의 공간을 복사해서 새로 만든다.



Class, Class 란? 




Class 의 특징



Thread 사용 방법



객체지향 프로그래밍의 장점




10문제 4지선다 





from turtle import Turtle
from turtle import *
import random

t = Turtle()
t.screen.title('Turtle Name')
t.screen.bgcolor("white")
t.shape('turtle')
t.pensize(5)
t.speed(2)
rgb = ['blue','red','black','yellow','green'] 

def turtle_move(posi):

    for _ in range(posi):
        x = random.randint(-400,400)
        y = random.randint(-400,400)
        t.pencolor(random.choice(rgb))
        t.goto(x,y)
        t.fillcolor(random.choice(rgb))

turtle_move(10)
t.screen.mainloop()




aa = [3,2,1,2,3,3,2,3,4,5,2,3,3,4,2]
bb = aa.copy()

print("aa의 리스트를 bb로 복사 : %s" % bb)

for i in range(1, len(bb)):
    if bb.count(bb[i-1]) > bb.count(bb[i]):
        bb[i] = bb[i-1]
        c = bb[i]

print("aa에서 가장 많이 있는 수 : %d" % c)
