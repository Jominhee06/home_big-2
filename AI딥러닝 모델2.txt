- if-else문

조건문이 참이면 if문이 실행되고 거짓이면 else문이 실행된다.


– &로 연결되면 두 조건이 모두 만족을 해야 ‘참(True)’이 되고, |로 연결되면 두
조건 중 어느 하나만 만족하면 ‘참(True)’이 된다.


- ifelse(비교 조건, 조건이 참일 때 선택할 값, 조건이 거짓일 때 선택할 값)


- if (비교 조건) {
조건이 참일 때 실행할 명령문(들)
} 
else {
조건이 거짓일 때 실행할 명령문(들)
}



- for문

반복 범위는 반복 변수에 할당할 값을 모아둔 벡터로 이 벡터의 길이만큼 for문
은 반복된다.

• for문이 한 번씩 수행될 때마다 반복 범위의 값을 하나씩 가져와 반복 변수에 저
장한 뒤 코드블록 안에 있는 명령문을 실행한다.


-for(반복 변수 in 반복 범위) {
	반복할 명령문(들)
}


- cat() 함수는 한 줄에 여러 개의 값을 결합하여 출력할 때 사용





- while 문

while (비교 조건) {
	반복할 명령문(들)
}


• while문은 비교 조건을 만족하는 동안 { } 안의 명령문들을 반복 실행한다

• While문은 for문과 달리 몇 번이나 반복이 실행될지 쉽게 알 수 없다.


- 조건문이 계속 충족되어 영원히 실행되는 반복문을 무한루프라고 한다.




apply( ) 함수

- 매트릭스나 데이터프레임에 있는 행들이나 열들을 하나하나 차
례로 꺼내어 평균이나 합계 등을 구하는 작업을 수행하고자 할 때 유용하다.


- apply(데이터셋, 행/열 방향 지정, 적용 함수)


• 데이터셋 : 반복 작업을 적용할 대상인 매트릭스나 데이터프레임 이름 입력한다.

• 행/열 방향 지정 : 행 방향 작업의 경우 1, 열 방향 작업의 경우 2를 지정한다.

• 적용 함수 : 반복 작업의 내용을 알려주는 것으로, R 함수이거나 다음 절에서
배울 사용자 정의 함수를 지정한다.



- 사용자 정의 함수

함수명 <- function(매개변수 목록) {
	실행할 명령문(들)
	return(함수의 실행 결과)
}


– 만들고자 하는 함수의 이름은 mymax, 이 함수가 입력받는 매개변수는 x와 y

– 코드블록 { } 안에 있는 if문은 x와 y 중 큰 값을 num.max에 저장하는 역할

– x와 y 중 큰 값이 반환(return)되는 것이다.

– 이렇게 작성된 함수는 작성 코드 자체를 한 번 실행해 주어야 한다.


-사용자 정의 함수의 저장과 재실행

함수 작성 -> 함수를 실행하여 R에 함수를 등록 -> 필요한 곳에서 함수를 호출



- 자격증 합격 여부 판단하기 코드
1. determine <- function(score){ }

2. determine <- function(score){
	total <- apply(score, 1, sum)
	scoreset <- cbind(score, total)
	result <- c( )

	for(i in 1:nrow(scoreset)){
		if(scoreset[i,1] < 20*0.4 | scoreset[i,2] < 20*0.4 |
			scoreset[i,3] < 60*0.4){
			result[i] <- '불합격’

		}else if(scoreset[i, 4] >= 60){
			result[i] <- '합격’

		}else{
			result[i] <- '불합격’
		}
		cat(i, '번째 응시생은', result[i],'입니다.\n’)
    	}
   	 return(result) # 저장된 결과 반환
}



3. 새로운 스크립트 열기 = source('myfunc.R')


4. sub1 <- c(14, 16, 12, 20, 8, 6, 12, 18, 16, 10)
    sub2 <- c(18, 14, 14, 16, 10, 12, 10, 20, 14, 14)
    sub3 <- c(44, 38, 30, 48, 42, 50, 36, 52, 54, 32)
    score <- data.frame(sub1, sub2, sub3)

    result <- determine(score)
    result


5. result <- determine(head(score, 3))
    result

6. # cat(i, '번째 응시생은', result[i],'입니다.\n') <- 이 문구가 나오지 않게 수정

7. source('myfunc.R')
     result <- determine(score)
     result



- 조건에 맞는 데이터 위치 찾기

• 데이터 분석을 하다 보면 자신이 원하는 데이터가 벡터나 매트릭스, 데이터프레
임 안에서 어디에 위치하는지 알아야 할 때가 있다.

• 편리하게 사용할 수 있는 함수가 which( ), which.max( ), which.min( ) 함수


- which  = 찾고자 하는 값의 인덱스를 알아내는 함수

- which.max  =  벡터 안에서 최댓값의 인덱스

- which.min  = 최솟값의 인덱스를 알아내는 함수


- 절차 수행

① 값의 종류를 구한다.

② 값의 종류별로 평균을 구한다.
	②-1 하나의 값에 해당하는 인덱스를 구한다.
	②-2 인덱스로 해당 값의 평균을 구해 저장한다.

③ 결과값에 값의 종류로 이름을 붙인다.

④ 결과값을 반환한다.

⑤ 작성을 마치면 스크립트 파일을 ‘myfunc.R’로 저장한다.



막대그래프 (barplot)

- 데이터가 포함하고 있는 정보를 이해하기 쉽게 표현하는 과정을 데이터 시각화

- 도수 분포표 계산

- table( ) 함수는 벡터에 저장된 범주형 데이터에 대해 데이터값이 종류별로 몇
	개인지 계산하는 함수

-  ds : 그래프로 표현할 도수분포표를 지정.

- colors()를 하면 R그래프에 사용할 수 있는 색 이름이 나온다.

- rainbow(숫자)를 입력하면 레인보우 팔레트에서 몇 가지의 색을  선택 가능하다.

- xlab , ylab = x,y축 설명

- horiz   = 수평 방향 출력

- legend.text = T = 범례 추가

- args.legend = list(x='topright', bty='n’,
	inset=c(-0.25,0)))       =  범례를 그래프 밖에 표시

- las=2  = 그룹 이름을 수직 방향 출력

• 0 : 축 방향(기본값)
• 1 : 수평 방향(축 방향과 상관없음)
• 2 : 축을 기준으로 수직 방향
• 3 : 수직 방향(축 방향과 상관없음)

– par( ) 함수는 그래프를 표시할 창에 대해 설정한다.

• mfrow=c(1, 1) : c(1,1)은 창을 분할하지 않음 의미한다.

• mar=c(5, 5, 5, 7) : 그래프 출력 창과 그래프 출력
영역 밖의 여유 공간을 지정한다.

c(bottom, left, top, right)의 순서로 숫자를 지정한다.




- args.legend 지정 사항

• x='topright' : 범례를 출력할 기본 위치를 지정하는데, 'topright'은 그래
프 출력 영역의 위쪽에서 오른쪽을 의미한다.

• bty='o' : 범례가 표시되는 영역에 테두리선을 표시할지의 여부를 지정한
다. 'o'은 테두리선을 표시하고, 'n'은 테두리선을 표시하지 않는다.

• inset=c(-0.25,0) : 범례를 x축과 y축 방향으로 얼마나 이동시킬지를 지정
한다. -1~1 사이의 값을 지정한다(%를 의미).



- par(mfrow=c(1, 1), mar=c(5, 5, 5, 7)) # 그래프 윈도우 설정

- par(mfrow=c(1, 1), mar=c(5,4,4,2)+0.1) # 그래프창 설정 해제



히스토그램(histogram)

-외관상 막대그래프와 비슷한 그래프로, 그룹이 명시적으로 존재하지 않는 수치형 자료의 분포를 시각화   할 때 사용한다.

- breaks=5) # 막대 개수 조절

- border='blue'  # 막대 테두리색

- 관측값들이 어느 구간에 어느 빈도로 분포하는지를 쉽게 파악한다.

- 외관상 막대그래프와 유사합니다. 일반적으로 막대 사이에 간격이 있으면 막대그래프이며 간격이 없이 대들이 붙어 있으면 히스토그램 이라고 구분할 수 있으며  또한 막대그래프에서는 막대의 면적이 의미가 없지만 히스토그램에서는 막대의 면적이 의미가 있다.


- freq <- result$counts # 구간별 빈도수 저장

- par(mfrow=c(2,2), mar=c(3,3,4,2)) # 화면 분할(2x2)

- par(mfrow=c(1,1), mar=c(5,4,4,2)+.1) # 화면 분할 취소




- 그래프를 파일에 저장

- 플롯창에 zoom을 클릭하면 plot zoom 팝업창이 표시, 

- save image as ->(파일로 저장)

- copy image -> ( 그래프 복사)

- 원하는 그래프의 크기 조절 가능

- 워드나 파워포인트와 같은 문서 편집 소프트웨어로 가져올수 있다.

- 플롯창에서[ Export ] 메뉴를 클릭하면 원하는 작업을 할 수 있다.

- pdf로 저장 가능, 클립보드로 복사


- 막대그래프와 히스토그램의 차이 ->  '면적의 차이'



원그래프(pie)

- 하나의 원 안에 데이터값이 차지하는 비율을 넓이로 나타낸 그래프

- table(favorite)을 사용

- pie3D 함수를 이용

- labelcex=1.0, # 레이블의 폰트 크기

- explode=0.1, # 파이 간 간격

- radius=1.5, # 파이의 크기


선 그래프의 작성

- 연도별 인구 증가 추이와 같이 시간의 변화에 따라 수집된 데이터를
    시각화하는 데 주로 사용  -> 시계열 데이터

- 시간의 변화에 따라 수집된 데이터 -> 시계열 데이터


- X축을 시간축으로 하여 선그래프를 그리면 시간 변화에 따른 데이터의 증감 추
이를 쉽게 확인 가능


- type='l' : 작성하려는 선그래프의 종류를 지정한다.

- lty=1 : 선의 종류(line type)를 지정한다.

- lwd=1 : 선의 굵기(line width)를 지정한다.


- lines = 그래프 데이터를 추가할 때 사용하는 함수이다.



상자그림(boxplot)

- 사분위수를 시각화하여 그래프 형태로 나타낸 것, 하나의 그래프로 데이터 분포 등 다양한 정보를 전달하여 단일 변수 수치형 자료를 파악하는데 자주 사용

- 구성요소

1. 자료 범위

2. 최솟값

3. 1사분위수(Q1)

4. 중앙값(Q2)

5. 3사분위수(Q3)

6. 최댓값

7. 전체 자료의 50%가 위치하는 범위

8. 정상 범위 밖의 값 표시, 이상치, 특이값(outlier)


- 데이터에 그룹정보가 있는 경우, 그룹으로 나눠 상자그림을 그릴 수 있다.


산점도(scatter plot)

- 다중변수 데이터에서 두 변수에 포함된 값들을 2차원 그래프상에 점으로 표현하여 분포를 관찰할 수 있도록 하는 도구 

- 여러 주제의 데이터 <- 변수, 열(column)


- 그려보면 두 변수의 데이터 분포와 변수 사이의 관계 파악 가능하다.


- 두 변수의 데이터 분포를 보는 것이므로 두 변수의 데이터 필요하다.


- wt : x축에 해당하는 데이터(벡터)


- mpg : y축에 해당하는 데이터(벡터)


- xlab='중량' : x축의 레이블


- ylab='연비(MPG)' : y축의 레이블


- col='red' : 점의 색 지정


- pch=19 : 점의 모양 지정



- 여러 변수들 간의 산점도

• plot( ) 함수는 변수가 2개 이상인 데이터에 대해 변수를 2개씩 짝지어 산점도 작성 

   mpg(연비), disp(배기량), drat(리어액슬기어비), wt(중량)



- 그룹 정보가 있는 2개의 변수의 산점도

• x='bottomright’:범례가표시될위치


• 'bottomright’:오른쪽아래의미


• legend=levels(iris$Species):범례에표시할항목


• levels(iris$Species):품종의이름


• col=c('red','green','blue'):범례에표시할점의색


• pch=c(1:3):범례에표시할점의모양



 






















